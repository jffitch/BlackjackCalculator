<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -5;
ready = false;
alarm[0] = 1;
instance_create(690, 390, back_button);
dealer.current_consume_code = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i, k, player1;
scroll_value = 1;
for (i=0; i&lt;6; i++) {
    with (instance_create(580 - 110 * i, 390, scroll_button)) {
        scroll_value = 3 - i;
        }
    }

player1 = player_num(1);
for (dealer.first_card=1; dealer.first_card&lt;=10; dealer.first_card++) {
    calculate_cards_left();
    with (dealer) {
        calculate_probability(false);
        }
    with (player1) {
        soft = false;
        for (total = 4; total&lt;=20; total++) {
            calculate_win_chance(false);
            table_window.recommendation[dealer.first_card, total] = calculate_recommendation(false);
            }
        soft = true;
        dealer.cards_left[0]--;
        dealer.cards_left[1]--;
        for (total = 12; total&lt;=20; total++) {
            if (dealer.cards_left[1] &gt;= 0) {
                calculate_win_chance(false);
                table_window.recommendation[dealer.first_card, total + 9] = calculate_recommendation(false);
                }
            else {
                table_window.recommendation[dealer.first_card, total + 9] = "N/A";
                }
            }
        dealer.cards_left[0]++;
        dealer.cards_left[1]++;
        for (k = 1; k &lt;=10; k++) {
            if (dealer.cards_left[k] &gt;= 2) {
                player1.hand[0] = k;
                dealer.cards_left[0] -= 2;
                dealer.cards_left[k] -= 2;
                soft = (k == 1);
                total = 2*k + 10*soft; 
                calculate_win_chance(false);
                calculate_split();
                table_window.recommendation[dealer.first_card, k + 29] = calculate_recommendation(true);
                dealer.cards_left[0] += 2;
                dealer.cards_left[k] += 2;
                }
            else {
                table_window.recommendation[dealer.first_card, k + 29] = "N/A";
                }
            }
        }
    }
dealer.first_card = -1;
player1.hand[0] = -1;
player1.total = 0;
player1.soft = 0;

ready = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_rectangle_colour(0,0,800,450,c_gray,c_gray,c_gray,c_gray,false);

if (!ready) {
    draw_set_font(text_font);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    draw_text(room_width/2, room_height/2, "Loading...");
    exit;
    }

var i, j;

draw_set_font(card_font);
draw_set_halign(fa_center);
draw_set_valign(fa_bottom);

draw_text(49, 50, "DEALER#HAS");
draw_line_width(29, 60, 69, 60, 3);

draw_text(49, 90, "Ace")
for (i=2; i&lt;=9; i++) {
    draw_text(49, 60 + 30 * i, string(i));
    }
draw_text(49, 360, "10/J/Q/K")

draw_text(440, 30, "YOU HAVE");
draw_line_width(90, 31, 790, 31, 3);

switch (scroll_value) {
    case 0: {
        for (i=1; i&lt;=10; i++) {
            draw_set_colour(c_black);
            draw_text(49 + 70 * i, 50, if2(i == 1, "Aces", string(i)+"s"));
            for (j=1; j&lt;=10; j++) {
                set_recommendation_color(recommendation[j, i+29]);
                draw_text(49 + 70*i, 60 + 30 * j, recommendation[j, i+29]);
                }
            }
        break;
        }    
    case 1: {
        for (i=4; i&lt;=11; i++) {
            draw_set_colour(c_black);
            draw_text(49 + 78 * (i - 3), 50, string(i));
            for (j=1; j&lt;=10; j++) {
                set_recommendation_color(recommendation[j, i]);
                draw_text(49 + 78 * (i - 3), 60 + 30 * j, recommendation[j, i]);
                }
            }
        break;
        }    
    case 2: {
        for (i=12; i&lt;=20; i++) {
            draw_set_colour(c_black);
            draw_text(49 + 78 * (i - 11), 50, string(i));
            for (j=1; j&lt;=10; j++) {
                set_recommendation_color(recommendation[j, i]);
                draw_text(49 + 78 * (i - 11), 60 + 30 * j, recommendation[j, i]);
                }
            }
        break;
        }
    case 3: {
        for (i=12; i&lt;=20; i++) {
            draw_set_colour(c_black);
            draw_text(49 + 78 * (i - 11), 50, string(i));
            for (j=1; j&lt;=10; j++) {
                set_recommendation_color(recommendation[j, i+9]);
                draw_text(49 + 78 * (i - 11), 60 + 30 * j, recommendation[j, i+9]);
                }
            }
        break;
        }
    }
draw_set_colour(c_black);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

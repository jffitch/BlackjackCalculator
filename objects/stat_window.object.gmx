<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -5;
ready = game_ready();
instance_create(690, 390, back_button);
if (ready == "ready") {
    loaded = false;
    alarm[0] = 1;
    }
else {
    loaded = true;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i;
with (dealer) {
    calculate_probability(true);
    }
adjust_cards_left();
with (player) {
    if (num &lt;= dealer.number_of_players) {
        calculate_win_chance(true);
        if (hand[0] != -1 &amp;&amp; hand[0] == hand[1] &amp;&amp; hand[2] == -1) {
            calculate_split();
            }
        else {
            win_if_split = 0;
            tie_if_split = 0;
            lose_if_split = 0;
            }
        recommendation = calculate_recommendation(hand[0] != -1 &amp;&amp; hand[0] == hand[1] &amp;&amp; hand[2] == -1);
        }
    }
if (!dealer.purchases[0]) {
    with (instance_create(150, 270, scroll_button)) {
        scroll_value = 4;
        }
    }
unadjust_cards_left();
loaded = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i;

draw_set_font(card_font);
draw_set_halign(fa_center);
draw_set_valign(fa_center);

draw_rectangle_colour(0,0,800,450,c_gray,c_gray,c_gray,c_gray,false);

if (!loaded) {
    draw_set_font(text_font);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    draw_text(room_width/2, room_height/2, "Loading...");
    exit;
    }

 
if (ready == "ready") {
    draw_text(50,400,"DEALER");
    draw_text(50,420,"Total:");
    draw_text(50,440,"Chance:");
    draw_text(if2(dealer.first_card == 1,115,100), 400, "("+if2(dealer.first_card == 1, "Ace", string(dealer.first_card))+")");
    for (i=dealer.hit_on+1; i&lt;=22-(dealer.hit_on == 11); i++) {
        draw_text(lerp(150-15*(dealer.hit_on&lt;=12), 650+10*(dealer.hit_on&lt;=12), (i-dealer.hit_on-1)/(21-dealer.hit_on-(dealer.hit_on == 11))), 420, if2(i==22, "BUST", string(i)));
        draw_text(lerp(150-15*(dealer.hit_on&lt;=12), 650+10*(dealer.hit_on&lt;=12), (i-dealer.hit_on-1)/(21-dealer.hit_on-(dealer.hit_on == 11))), 440, string_format(dealer.chance_of[i],0,2)+"%");
        }
    draw_text(50,40,"IF STAND");
    draw_text(50,60,"Win:");
    draw_text(50,80,"Tie:");
    draw_text(50,100,"Lose:");
    draw_text(50,140,"IF HIT");
    draw_text(50,160,"Win:");
    draw_text(50,180,"Tie:");
    draw_text(50,200,"Lose:");
    draw_text(50,220,"Bust:");
    draw_text(50,260,"IF SPLIT");
    draw_text(50,280,"Win:");
    draw_text(50,300,"Tie:");
    draw_text(50,320,"Lose:");
    draw_text(50,360,"BEST TO:");
    for(i=1; i&lt;=dealer.number_of_players; i++) {
        var player_current = player_num(i);
        //lerp(150, 750, (i-1)/max(1,(dealer.number_of_players - 1)))
        draw_text(100 + 100 * i, 20, "PLAYER "+string(i));
        draw_text(100 + 100 * i, 40, "("+if2(player_current.soft &amp;&amp; player_current.total != 21, "SOFT ", "")+if2(player_current.total == 22, "BUST", string(player_current.total))+")");
        draw_text(100 + 100 * i, 60, string_format(player_current.win_if_stand,0,2)+"%");
        draw_text(100 + 100 * i, 80, string_format(player_current.tie_if_stand,0,2)+"%");
        draw_text(100 + 100 * i, 100, string_format(player_current.lose_if_stand,0,2)+"%");
        draw_text(100 + 100 * i, 160, string_format(player_current.win_if_hit,0,2)+"%");
        draw_text(100 + 100 * i, 180, string_format(player_current.tie_if_hit,0,2)+"%");
        draw_text(100 + 100 * i, 200, string_format(player_current.lose_if_hit,0,2)+"%");
        draw_text(100 + 100 * i, 220, string_format(player_current.bust_if_hit,0,2)+"%");
        if (dealer.purchases[0]) {
            draw_text(100 + 100 * i, 280, if2(player_current.hand[0] == player_current.hand[1] &amp;&amp; player_current.hand[2] == -1, string_format(player_current.win_if_split,0,2)+"%", "N/A"));
            draw_text(100 + 100 * i, 300, if2(player_current.hand[0] == player_current.hand[1] &amp;&amp; player_current.hand[2] == -1, string_format(player_current.tie_if_split,0,2)+"%", "N/A"));
            draw_text(100 + 100 * i, 320, if2(player_current.hand[0] == player_current.hand[1] &amp;&amp; player_current.hand[2] == -1, string_format(player_current.lose_if_split,0,2)+"%", "N/A"));
            }
        set_recommendation_color(player_current.recommendation);
        draw_text(100 + 100 * i, 360, (player_num(i)).recommendation);
        draw_set_colour(c_black);
        }
    }
if (ready == "incomplete") {
    draw_set_halign(fa_left);
    draw_text(50,50,"Cannot calculate stats now. Some cards do not have values.##Please go back and give values to every card, then try again.");
    }
if (ready == "too many") {
    draw_set_halign(fa_left);
    draw_text(50,50,"Some card values were used more than are allowed in the deck.##Please go back and change those card values, then try again.");
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();

ini_open("BlackjackCalculator.ini");
purchases[0] = ini_read_real("iap", "automatic", -1);
price[0] = ini_read_real("iap", "price", 2.99);
purchasable = ini_read_real("iap", "purchasable", 1);
consume_code = ini_read_real("iap", "consume_code", 0);
hold_time = ini_read_real("stats", "hold_time", 15);
hold_speed = ini_read_real("stats", "hold_speed", 5);
show_warning = ini_read_real("stats", "show_warning", 1);
current_consume_code = 0;
ini_close();

center_x = x + 20;
center_y = y + 60;
deal_ready = false;
dealing_to = 1;
hit_on = 16;
hit_on_soft = 16;
    
save_main = true;
save_used = false;

total = 0;
soft = false;

var i, j;
for (i=1; i&lt;=5; i++){
    with instance_create(i*155-130,310,player){
        num=i;
        }
    }
for (i=12; i&lt;=22; i++) {
    for (j=0; j&lt;=10; j++) {
        chance_of[j, i] = 0;
        }
    }
depth=0;

first_card = -1;
second_card = false;

mouse_player = -1;
mouse_card = -1;

instance_create(365, 15, table_button);
instance_create(365, 70, stat_button);
instance_create(365, 125, settings_button);
instance_create(365, 180, instructions_button);
instance_create(room_width-3, 3, tv);
instance_create(room_width-160, 15, discard_button);
if (show_warning) {
    instance_create(0, 0, warning_window);
    }

for (i=0; i&lt;=10; i++) {
    cards_removed[i] = 0;
    }
number_of_players = 1;
number_of_decks = 1;
load_settings();
if (purchases[0] != 1) {
    for (i=0; i&lt;=10; i++) {
        cards_removed[i] = 0;
        }
    number_of_players = 1;
    number_of_decks = 1;
    }
calculate_cards_left();

sprite_shown = dealer_rest;    
dealing_animation = 0;
deal_target = 1;

click_ready = true;
purchase_ready = true;

if (purchases[0] != 0 &amp;&amp; purchases[0] != 1) {
    purchases[0] = 0;
    purchase_ready = false;
    iap_initialize();
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>current_consume_code = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>click_ready = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i, j;
/*if (keyboard_check_pressed(vk_numpad0)) {
    purchases[0] = !purchases[0];
    if (number_of_decks != 1 &amp;&amp; !purchases[0]) {
        number_of_decks = 1;
        for (i=0; i&lt;=10; i++) {
            dealer.cards_removed[i] = 0
            }
        calculate_cards_left();
        }
    if (!purchases[0]) {
        number_of_players = 1;
        for (j=2; j&lt;=5; j++) {
            with (player_num(j)) {
                for (i=0; i&lt;9; i++) {
                    hand[i] = -1;
                    }
                for (i=0; i&lt;=10; i++) {
                    count[i] = 0;
                    }
                card_total(0);
                }
            }
        }
    save_settings();
    }
if (keyboard_check_pressed(ord("R"))) {
    if (tv.ad_image != ad_start) {
        sprite_delete(tv.ad_image);
        }
    game_restart();
    }*/

mouse_player = -1;
mouse_card = -1;
var expected_mouse_player = (mouse_x + 137) div 155;
var expected_mouse_card_x = (mouse_x + 137) mod 155;
var expected_mouse_card_y = (425 - mouse_y);

if (clamp(expected_mouse_player,1,5) == expected_mouse_player &amp;&amp; expected_mouse_card_x &lt; 144 &amp;&amp; clamp(expected_mouse_card_y,0,179) == expected_mouse_card_y) {
    mouse_player = expected_mouse_player;
    mouse_card = (expected_mouse_card_x div 48) + 3 * (expected_mouse_card_y div 60);
    }

if (point_in_rectangle(mouse_x,mouse_y,18,178,68,242)){
    mouse_player = 0;
    }
    
if (mouse_check_button_released(mb_left) &amp;&amp; mouse_player != -1 &amp;&amp; screen_open()){
    if ((mouse_player == 0 &amp;&amp; first_card != -1) || (mouse_player !=0 &amp;&amp; (player_num(mouse_player)).hand[mouse_card] != -1)) {
        with (instance_create(200,95,chooser)) {
            player_target = other.mouse_player;
            card_target = other.mouse_card;
            }
        if (mouse_player == 0) {
            first_card = 0;
            }
        else {
            with (player_num(mouse_player)) {
                count[hand[other.mouse_card]]--;
                hand[other.mouse_card] = 0;
                card_total(0);
                }
            }
        }
    }

if (screen_open() &amp;&amp; dealing_to &lt;= 6 &amp;&amp; deal_ready) {
    give_card_if_not_full(dealing_to);
    }
if (dealing_animation == 20) {
    sprite_shown = asset_get_index("dealer_throw_"+string(deal_target));
    }
if (dealing_animation == 17) {
    sprite_shown = asset_get_index("dealer_hold_"+string(deal_target));
    var target = player_num(deal_target);
    with (instance_create(205+10*deal_target, 170, card)) {
        num = dealer.deal_target;
        speed = point_distance(x, y, target.center_x, target.center_y) / 10;
        direction = point_direction(x, y, target.center_x, target.center_y)
        }
    }
if (dealing_animation == 0) {
    sprite_shown = dealer_rest;
    }
dealing_animation = max(0,dealing_animation - 1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="66">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// initialize variables, iap_data is a map that’s automatically created
var p_map = ds_map_create();
var p_index = ds_map_find_value(iap_data, "index");
var p_type = ds_map_find_value(iap_data, "type");

// this should work only if the event “type” is purchasing (iap_ev_purchase) or activating on create (iap_ev_product)
if (p_type == iap_ev_purchase || p_type == iap_ev_product) {
    // this puts the details in the map named “p_map”, returning the id as “p_product” and checking whether it has been purchased
    iap_purchase_details(p_index, p_map);
    var p_product = ds_map_find_value(p_map, "product");
    // if it has been purchased, the purchases array is updated
    if (ds_map_find_value(p_map, "status") == iap_purchased) {
        if (p_product == "bjcalc_full_version") {
            purchases[0] = true;
            if (instance_exists(stat_window)) {
                calculate_cards_left();
                destroy_list(back_button, stat_window, scroll_button);
                instance_create(0, 0, stat_window);
                }
            }
        }
    number_of_decks = 5;
    load_settings();
    if (!purchases[0]) {
        number_of_players = 1;
        number_of_decks = 1;
        for (i=0; i&lt;=10; i++) {
            cards_removed[i] = 0;
            }
        }
    }

ds_map_destroy(p_map);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i, dealer_width, dealer_height, table_border, table_color, border_color;
dealer_width = 350;
dealer_height = 175;
table_border = 7;
table_color = make_colour_rgb(0,128,0);
border_color = make_colour_rgb(128,0,0);

draw_sprite_ext(rug, 0, 0, 0, dealer_width/sprite_get_width(rug), dealer_width/sprite_get_width(rug), 0, c_white, 1);
for (i=0; i&lt;dealer_width/60+1; i++) {
    draw_sprite(stool, 0, 60 * i + 10, 0);
    }
draw_rectangle_colour(0,dealer_height,800,450,border_color,border_color,border_color,border_color,false);
draw_rectangle_colour(dealer_width,0,800,dealer_height,border_color,border_color,border_color,border_color,false);
draw_rectangle_colour(table_border,dealer_height+table_border,800-table_border,450-table_border,table_color,table_color,table_color,table_color,false);
draw_rectangle_colour(dealer_width+table_border,table_border,800-table_border,dealer_height+table_border,table_color,table_color,table_color,table_color,false);

draw_sprite(sprite_shown, 0, dealer_width-125, dealer_height);

if (first_card != -1) {
    draw_card(0, first_card);
    }
if (second_card) {
    draw_card(1, -2);
    }

draw_set_font(big_letters);
draw_set_halign(fa_center);
draw_set_valign(fa_bottom);
draw_set_colour(c_red);

draw_text(400, 300, "DEALER MUST HIT ON " + string(hit_on) + if2(hit_on_soft &gt; hit_on, " / SOFT "+string(hit_on_soft), "") + "#AND STAND ON " + string(hit_on+1) + if2(hit_on_soft &gt; hit_on, " / SOFT "+string(hit_on_soft+1), ""));
draw_set_colour(c_black);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
